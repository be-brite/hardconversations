// Code generated by hardc. DO NOT EDIT.

package autorecruiter

import (
	"context"

	"github.com/be-brite/hardconversations/chat"
	"github.com/be-brite/hardconversations/samples/recruiter/resumes"
	
)


const instruction = `Given a list of resumes, you are able to determine which ones are the best fit for the job description.
`

type Client struct {
	*chat.Client
}

func NewClient(openAIKey string, opt ...chat.ConfigOption) *Client {
	c := &Client{
		Client: chat.NewClient(openAIKey, instruction, opt...),
	}

	return c
}

type Thread struct {
	*chat.Thread
}

func (c *Client) NewThread(opt ...chat.ConfigOption) *Thread {
	return &Thread{
		Thread: c.Thread.NewThread(opt...),
	}
}

func (c *Thread) NewThread(opt ...chat.ConfigOption) *Thread {
	return &Thread{
		Thread: c.Thread.NewThread(opt...),
	}
}



// TODO: handle different input and output types, arrays, structs, etc
func (t *Thread) RankResumes(ctx context.Context, input string) (result []int, md chat.Metadata, err error) {
	const prompt = `Return just the IDs of between 1 and 3 resumes in a comma-separated list, ranked from best to worst fit for the job description. Do not include resumes that are not a good fit.` // TODO initialize text embedding

	parseInstruction, err := chat.ParseInstruction(result)
	if err != nil {
		return result, chat.Metadata{}, err
	}

	fullPrompt := parseInstruction + prompt
	inputStr, err := chat.ConvertInput(input)
	if err != nil {
		return result, chat.Metadata{}, err
	}
	fullPrompt += "\n" + inputStr
	

	output, md, err := t.Thread.ExecutePrompt(ctx, fullPrompt)
	if err != nil {
		return result, chat.Metadata{}, err
	}

	err = chat.Parse(output, &result)
	if err != nil {
		return result, chat.Metadata{}, err
	}

	return result, md, nil
}



// TODO: handle different input and output types, arrays, structs, etc
func (t *Thread) GetCandidateInfo(ctx context.Context, input string) (result resumes.Candidate, md chat.Metadata, err error) {
	const prompt = `Return the candidate info from the resume` // TODO initialize text embedding

	parseInstruction, err := chat.ParseInstruction(result)
	if err != nil {
		return result, chat.Metadata{}, err
	}

	fullPrompt := parseInstruction + prompt
	inputStr, err := chat.ConvertInput(input)
	if err != nil {
		return result, chat.Metadata{}, err
	}
	fullPrompt += "\n" + inputStr
	

	output, md, err := t.Thread.ExecutePrompt(ctx, fullPrompt)
	if err != nil {
		return result, chat.Metadata{}, err
	}

	err = chat.Parse(output, &result)
	if err != nil {
		return result, chat.Metadata{}, err
	}

	return result, md, nil
}



// TODO: handle different input and output types, arrays, structs, etc
func (t *Thread) GenerateRecruiterMessage(ctx context.Context, input resumes.RecruiterMessageRequest) (result resumes.Email, md chat.Metadata, err error) {
	const prompt = `Generate a message to send to the candidate about the job; mention what you like about their resume and why you think they would be a good fit for the job.` // TODO initialize text embedding

	parseInstruction, err := chat.ParseInstruction(result)
	if err != nil {
		return result, chat.Metadata{}, err
	}

	fullPrompt := parseInstruction + prompt
	inputStr, err := chat.ConvertInput(input)
	if err != nil {
		return result, chat.Metadata{}, err
	}
	fullPrompt += "\n" + inputStr
	

	output, md, err := t.Thread.ExecutePrompt(ctx, fullPrompt)
	if err != nil {
		return result, chat.Metadata{}, err
	}

	err = chat.Parse(output, &result)
	if err != nil {
		return result, chat.Metadata{}, err
	}

	return result, md, nil
}

