// Code generated by hardc. DO NOT EDIT.

package {{.Package}}

import (
	"context"

	"github.com/troylelandshields/hardconversations/chat"
	{{ range .Imports }}"{{ . }}"
	{{ end }}
)


const instruction = `{{ .Instruction }}`

type Client struct {
	*chat.Client
}

func NewClient(openAIKey string, opt ...chat.ConfigOption) *Client {
	c := &Client{
		Client: chat.NewClient(openAIKey, instruction, opt...),
	}

	return c
}

type Thread struct {
	*chat.Thread
}

func (c *Client) NewThread(opt ...chat.ConfigOption) *Thread {
	return &Thread{
		Thread: c.Thread.NewThread(opt...),
	}
}

func (c *Thread) NewThread(opt ...chat.ConfigOption) *Thread {
	return &Thread{
		Thread: c.Thread.NewThread(opt...),
	}
}

{{ range .Questions }}

// TODO: handle different input and output types, arrays, structs, etc
func (t *Thread) {{ .FunctionName }}(ctx context.Context{{ if and .InputParsed .InputParsed.TypeName}}, input {{.InputParsed.TypeName}}{{end}}) (result {{ .OutputParsed.TypeName }}, md chat.Metadata, err error) {
	const prompt = `{{ .Prompt }}` // TODO initialize text embedding

	parseInstruction, err := chat.ParseInstruction(result)
	if err != nil {
		return result, chat.Metadata{}, err
	}

	fullPrompt := parseInstruction + prompt{{ if and .InputParsed .InputParsed.TypeName}}
	inputStr, err := chat.ConvertInput(input)
	if err != nil {
		return result, chat.Metadata{}, err
	}
	fullPrompt += "\n" + inputStr
	{{ end }}

	output, md, err := t.Thread.ExecutePrompt(ctx, fullPrompt)
	if err != nil {
		return result, chat.Metadata{}, err
	}

	err = chat.Parse(output, &result)
	if err != nil {
		return result, chat.Metadata{}, err
	}

	return result, md, nil
}

{{end}}